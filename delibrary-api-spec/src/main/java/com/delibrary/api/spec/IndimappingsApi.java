/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.delibrary.api.spec;

import com.delibrary.api.model.ErrorResponse;
import com.delibrary.api.model.IndiMappingModel;
import com.delibrary.api.model.IndiMappingModelResponse;
import com.delibrary.api.model.ResponseMessage;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "indimappings", description = "the indimappings API")
public interface IndimappingsApi {

    Logger log = LoggerFactory.getLogger(IndimappingsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Create new doc mapping", nickname = "createMapping", notes = "Create new mapping", response = ResponseMessage.class, tags={ "IndDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/indimappings/individual",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseMessage> createMapping(@ApiParam(value = ""  )  @Valid @RequestBody IndiMappingModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndimappingsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete existing individual doc mapping", nickname = "deleteMapping", notes = "Delete individual doc mapping", response = ResponseMessage.class, tags={ "IndDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/indimappings/{id}/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseMessage> deleteMapping(@ApiParam(value = "Individual Id",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndimappingsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Find mapping by Id", nickname = "findMappingById", notes = "Find records of documentMapping", response = IndiMappingModelResponse.class, tags={ "IndDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = IndiMappingModelResponse.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/indimappings/individual",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<IndiMappingModelResponse> findMappingById(@NotNull @ApiParam(value = "Find mapping by individual's Id", required = true) @Valid @RequestParam(value = "id", required = true) Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data\" : [ {\n    \"dateOfSigning\" : \"dateOfSigning\",\n    \"note\" : \"note\",\n    \"docName\" : \"docName\",\n    \"docId\" : 6,\n    \"docType\" : \"docType\",\n    \"dateOfExecution\" : \"dateOfExecution\",\n    \"numOfDoc\" : 1,\n    \"id\" : \"id\",\n    \"indiId\" : 0,\n    \"content\" : \"content\"\n  }, {\n    \"dateOfSigning\" : \"dateOfSigning\",\n    \"note\" : \"note\",\n    \"docName\" : \"docName\",\n    \"docId\" : 6,\n    \"docType\" : \"docType\",\n    \"dateOfExecution\" : \"dateOfExecution\",\n    \"numOfDoc\" : 1,\n    \"id\" : \"id\",\n    \"indiId\" : 0,\n    \"content\" : \"content\"\n  } ]\n}", IndiMappingModelResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndimappingsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get list of mappings", nickname = "getAllMapping", notes = "Get all information of mapping", response = IndiMappingModelResponse.class, tags={ "IndDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = IndiMappingModelResponse.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/indimappings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<IndiMappingModelResponse> getAllMapping() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data\" : [ {\n    \"dateOfSigning\" : \"dateOfSigning\",\n    \"note\" : \"note\",\n    \"docName\" : \"docName\",\n    \"docId\" : 6,\n    \"docType\" : \"docType\",\n    \"dateOfExecution\" : \"dateOfExecution\",\n    \"numOfDoc\" : 1,\n    \"id\" : \"id\",\n    \"indiId\" : 0,\n    \"content\" : \"content\"\n  }, {\n    \"dateOfSigning\" : \"dateOfSigning\",\n    \"note\" : \"note\",\n    \"docName\" : \"docName\",\n    \"docId\" : 6,\n    \"docType\" : \"docType\",\n    \"dateOfExecution\" : \"dateOfExecution\",\n    \"numOfDoc\" : 1,\n    \"id\" : \"id\",\n    \"indiId\" : 0,\n    \"content\" : \"content\"\n  } ]\n}", IndiMappingModelResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndimappingsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update existing individual doc", nickname = "updateMapping", notes = "Update individual doc", response = ResponseMessage.class, tags={ "IndDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/indimappings/{id}/edit",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<ResponseMessage> updateMapping(@ApiParam(value = "Individual Id",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default IndimappingsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
