/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.delibrary.api.spec;

import com.delibrary.api.model.CorporateModel;
import com.delibrary.api.model.CorporateModelResponse;
import com.delibrary.api.model.DocumentModel;
import com.delibrary.api.model.DocumentModelResponse;
import com.delibrary.api.model.ErrorResponse;
import com.delibrary.api.model.ResponseMessage;
import com.delibrary.api.model.RestaurantMappingModel;
import com.delibrary.api.model.RestaurantMappingResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "restaurants", description = "the restaurants API")
public interface RestaurantsApi {

    Logger log = LoggerFactory.getLogger(RestaurantsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Create new doc mapping", nickname = "createNewRestaurantMapping", notes = "Create new mapping", response = ResponseMessage.class, tags={ "CorpDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/mappings/restaurant",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseMessage> createNewRestaurantMapping(@ApiParam(value = ""  )  @Valid @RequestBody RestaurantMappingModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Create new doc for individual", nickname = "createRestaurantDocuments", notes = "Create new individual", response = ResponseMessage.class, tags={ "Corperate Documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/documents",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseMessage> createRestaurantDocuments(@ApiParam(value = ""  )  @Valid @RequestBody DocumentModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete Restaurant", nickname = "deleteRestaurant", notes = "Delete Restaurant", response = ResponseMessage.class, tags={ "Corperate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/{id}/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseMessage> deleteRestaurant(@ApiParam(value = "Restaurant Id",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete existing restaurant doc", nickname = "deleteRestaurantDoc", notes = "Delete restaurant doc", response = ResponseMessage.class, tags={ "Corperate Documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/documents/{id}/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseMessage> deleteRestaurantDoc(@ApiParam(value = "Restaurant Id",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete existing restaurant doc mapping", nickname = "deleteRestaurantMapping", notes = "Delete restaurant doc mapping", response = ResponseMessage.class, tags={ "CorpDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/mappings/{id}/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseMessage> deleteRestaurantMapping(@ApiParam(value = "Restaurant Id",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Find mapping by Id", nickname = "findRestaurantMappingById", notes = "Find records of documentMapping", response = RestaurantMappingModel.class, tags={ "CorpDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = RestaurantMappingModel.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/mappings/restaurant",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<RestaurantMappingModel> findRestaurantMappingById(@NotNull @ApiParam(value = "Find mapping by restaurant's Id", required = true) @Valid @RequestParam(value = "id", required = true) Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"dateOfSigning\" : \"dateOfSigning\",\n  \"note\" : \"note\",\n  \"docName\" : \"docName\",\n  \"docId\" : 6,\n  \"docType\" : \"docType\",\n  \"dateOfExecution\" : \"dateOfExecution\",\n  \"numOfDoc\" : 1,\n  \"id\" : \"id\",\n  \"restaurantId\" : 0\n}", RestaurantMappingModel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get list of restaurant documents", nickname = "getAllRestaurantDocuments", notes = "Get all restaurant documents", response = DocumentModelResponse.class, tags={ "Corperate Documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = DocumentModelResponse.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/documents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DocumentModelResponse> getAllRestaurantDocuments() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data\" : [ {\n    \"docName\" : \"docName\",\n    \"docCode\" : \"docCode\",\n    \"id\" : 0\n  }, {\n    \"docName\" : \"docName\",\n    \"docCode\" : \"docCode\",\n    \"id\" : 0\n  } ]\n}", DocumentModelResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get list of mappings", nickname = "getRestaurantMapping", notes = "Get all information of mapping", response = RestaurantMappingResponse.class, tags={ "CorpDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = RestaurantMappingResponse.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/mappings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<RestaurantMappingResponse> getRestaurantMapping() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data\" : [ {\n    \"dateOfSigning\" : \"dateOfSigning\",\n    \"note\" : \"note\",\n    \"docName\" : \"docName\",\n    \"docId\" : 6,\n    \"docType\" : \"docType\",\n    \"dateOfExecution\" : \"dateOfExecution\",\n    \"numOfDoc\" : 1,\n    \"id\" : \"id\",\n    \"restaurantId\" : 0\n  }, {\n    \"dateOfSigning\" : \"dateOfSigning\",\n    \"note\" : \"note\",\n    \"docName\" : \"docName\",\n    \"docId\" : 6,\n    \"docType\" : \"docType\",\n    \"dateOfExecution\" : \"dateOfExecution\",\n    \"numOfDoc\" : 1,\n    \"id\" : \"id\",\n    \"restaurantId\" : 0\n  } ]\n}", RestaurantMappingResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all restaurants", nickname = "getRestaurants", notes = "Get all restaurants", response = CorporateModelResponse.class, tags={ "Corperate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = CorporateModelResponse.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CorporateModelResponse> getRestaurants() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data\" : [ {\n    \"city\" : \"city\",\n    \"name\" : \"name\",\n    \"id\" : 0\n  }, {\n    \"city\" : \"city\",\n    \"name\" : \"name\",\n    \"id\" : 0\n  } ]\n}", CorporateModelResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Save a new restaurant", nickname = "saveRestaurant", notes = "Save a new restaurant", response = ResponseMessage.class, tags={ "Corperate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseMessage> saveRestaurant(@ApiParam(value = ""  )  @Valid @RequestBody CorporateModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update a restaurant entity", nickname = "updateRestaurant", notes = "Update old restaurant", response = ResponseMessage.class, tags={ "Corperate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/{id}/edit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<ResponseMessage> updateRestaurant(@ApiParam(value = "Restaurant Id",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody CorporateModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update restaurant document", nickname = "updateRestaurantDocument", notes = "Update restaurant document", response = ResponseMessage.class, tags={ "Corperate Documents", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/documents/{id}/edit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<ResponseMessage> updateRestaurantDocument(@ApiParam(value = "Document Id",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody DocumentModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update existing restaurant doc", nickname = "updateRestaurantMapping", notes = "Update restaurant doc", response = ResponseMessage.class, tags={ "CorpDoc Mapping", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = ResponseMessage.class),
        @ApiResponse(code = 400, message = "Invalid input data", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/restaurants/mappings/{id}/edit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<ResponseMessage> updateRestaurantMapping(@ApiParam(value = "restaurant Id",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody ResponseMessage body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"code\" : \"S01\",\n  \"meta\" : { },\n  \"description\" : \"Response Description\",\n  \"title\" : \"Response Message\"\n}", ResponseMessage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RestaurantsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
